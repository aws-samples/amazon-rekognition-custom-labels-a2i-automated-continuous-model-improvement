AWSTemplateFormatVersion: "2010-09-09"
Description: |
  This template deploys an automated and configurrable ML workflow around Amazon Rekognition Custom Labels and Amazon Augmented AI (A2I) with AWS Step Functions and AWS System Manager Parameter Store backed by AWS Lambda.
Parameters:
  SNSEmail:
    Type: String
    Description: Enter a valid email address for Amazon SNS
    AllowedPattern: "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
    ConstraintDescription: Please enter a valid email address
  A2IPrivateTeamName:
    Type: String
    Default: ''
    Description: Please enter a Private Team Name or leave blank to create a new one.
Conditions:
  CreateWorkTeam: !Equals
    - !Ref A2IPrivateTeamName
    - ''
Resources:
  S3Bucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"
  S3BucketPolicy:
        DeletionPolicy: Retain
        Type: AWS::S3::BucketPolicy
        Properties:
          Bucket: !Ref S3Bucket
          PolicyDocument: !Sub |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "${AWS::StackId}",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "rekognition.amazonaws.com"
                  },
                  "Action": [
                    "s3:GetBucketAcl",
                    "s3:GetBucketLocation"
                  ],
                  "Resource": "${S3Bucket.Arn}"
                },
                {
                  "Sid": "${AWS::StackId}",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "rekognition.amazonaws.com"
                  },
                  "Action": [
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:GetObjectVersion",
                    "s3:GetObjectTagging"
                  ],
                  "Resource": "${S3Bucket.Arn}/*"
                },
                {
                  "Sid": "${AWS::StackId}",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "rekognition.amazonaws.com"
                  },
                  "Action": "s3:GetBucketAcl",
                  "Resource": "${S3Bucket.Arn}"
                },
                {
                  "Sid": "${AWS::StackId}",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "rekognition.amazonaws.com"
                  },
                  "Action": "s3:PutObject",
                  "Resource": "${S3Bucket.Arn}/*",
                  "Condition": {
                    "StringEquals": {
                      "s3:x-amz-acl": "bucket-owner-full-control"
                    }
                  }
                }
              ]
            }
  DyanmoDBInferenceA2ILogs:
    DeletionPolicy: Retain
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "DetectLabelRequestId"
          AttributeType: "S"
        - AttributeName: "DetectLabelDate"
          AttributeType: "S"
        - AttributeName: "Sampled"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "DetectLabelRequestId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: "Sampled_GSI"
          KeySchema:
            - AttributeName: "Sampled"
              KeyType: "HASH"
            - AttributeName: "DetectLabelDate"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "KEYS_ONLY"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  SNSTopicRekognition:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref SNSEmail
          Protocol: email
      TopicName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "sns-topic"]]
      DisplayName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "sns-topic"]]
  SNSTopicRekognitionPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Id: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "sns-policy"]]
          Version: "2012-10-17"
          Statement:
            Sid: !Ref AWS::StackId
            Action: sns:Publish
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Resource: !Ref SNSTopicRekognition
            Condition:
              ArnLike:
                aws:SourceArn: !Join ["/",[!Join [":", ["arn:aws:lambda", !Ref AWS::Region, !Ref AWS::AccountId, "function"]], !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "*"]]]]
        Topics:
          - !Ref SNSTopicRekognition
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "LambdaExecutionRole"]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "LambdaExecutionPolicy"]]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: iam:PassRole
            Resource: !Join ["/", [!Join [":",["arn:aws:iam:",!Ref AWS::AccountId,"role"]], "*"]]
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Join [":", ["arn:aws:logs:*", !Ref AWS::AccountId, "*"]]
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectVersion
              - s3:GetObjectTagging
              - s3:PutObject
            Resource: !Join ["/", [!GetAtt S3Bucket.Arn, "*"]]
          - Effect: Allow
            Action:
              - s3:GetBucketAcl
              - s3:GetBucketLocation
              - s3:ListBucket
              - s3:PutBucketNotification
            Resource: !GetAtt S3Bucket.Arn
          - Effect: Allow
            Action: s3:ListAllMyBuckets
            Resource: "arn:aws:s3:::*"
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref SNSTopicRekognition
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:Query
            Resource: !Join ["",[!GetAtt DyanmoDBInferenceA2ILogs.Arn, "*"]]
          - Effect: Allow
            Action:
              - ssm:GetParameter*
              - ssm:PutParameter
            Resource: !Join ["/", [!Join [":", ["arn:aws:ssm", !Ref AWS::Region, !Ref AWS::AccountId, "parameter"]], !Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "*"]]
          - Effect: Allow
            Action:
              - events:EnableRule
              - events:DisableRule
              - events:PutRule
            Resource: !Join ["/",[!Join [":", ["arn:aws:events", !Ref AWS::Region, !Ref AWS::AccountId, "rule"]], !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "*"]]]]
          - Effect: Allow
            Action: states:StartExecution
            Resource: !Join [":",[!Join [":", ["arn:aws:states", !Ref AWS::Region, !Ref AWS::AccountId, "stateMachine"]], !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "*"]]]]
          - Effect: Allow
            Action:
              - rekognition:CreateProject*
              - rekognition:DescribeProjectVersions
              - rekognition:DetectCustomLabels
              - rekognition:StartProjectVersion
              - rekognition:StopProjectVersion
            Resource: !Join ["/",[!Join [":", ["arn:aws:rekognition", !Ref AWS::Region, !Ref AWS::AccountId, "project"]], !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "*"]]]]
          - Effect: Allow
            Action:
              - sagemaker:DeleteFlowDefinition
              - sagemaker:CreateFlowDefinition
              - sagemaker:DescribeFlowDefinition
            Resource: !Join ["/",[!Join [":", ["arn:aws:sagemaker", !Ref AWS::Region, !Ref AWS::AccountId, "flow-definition"]], !Join ["-", ["*", !Select [6, !Split ['-', !Ref AWS::StackId]], "*"]]]]
          - Effect: Allow
            Action:
              - sagemaker:DescribeHumanTaskUi
              - sagemaker:DeleteHumanTaskUi
              - sagemaker:CreateHumanTaskUi
            Resource: !Join ["/",[!Join [":", ["arn:aws:sagemaker", !Ref AWS::Region, !Ref AWS::AccountId, "human-task-ui"]], !Join ["-", ["*", !Select [6, !Split ['-', !Ref AWS::StackId]], "*"]]]]
          - Effect: Allow
            Action:
              - sagemaker:StartHumanLoop
              - sagemaker:DescribeWorkteam
            Resource: "*"
  LambdaStageRekognitionAssets:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "stage-rekognition-assets"]]
      Code:
        ZipFile: !FindInMap [Lambda, CodeBlock, LambdaStageRekognitionAssets]
      Handler: !FindInMap [Lambda, Settings, Handler]
      Runtime: !FindInMap [Lambda, Settings, Runtime]
      Timeout: !FindInMap [Lambda, Settings, Timeout]
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          parameter_store_path: !Join ["/", ["",!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], ""]]
  LambdaUpdateEventRules:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "update-event-rules"]]
      Code:
        ZipFile: !FindInMap [Lambda, CodeBlock, LambdaUpdateEventRules]
      Handler: !FindInMap [Lambda, Settings, Handler]
      Runtime: !FindInMap [Lambda, Settings, Runtime]
      Timeout: !FindInMap [Lambda, Settings, Timeout]
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          parameter_store_path: !Join ["/", ["",!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], ""]]
  LambdaCheckAutoTraining:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "check-auto-training"]]
      Code:
        ZipFile: !FindInMap [Lambda, CodeBlock, LambdaCheckAutoTraining]
      Handler: !FindInMap [Lambda, Settings, Handler]
      Runtime: !FindInMap [Lambda, Settings, Runtime]
      Timeout: !FindInMap [Lambda, Settings, Timeout]
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          parameter_store_path: !Join ["/", ["",!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], ""]]
  LambdaCreateTrainingManifest:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "create-training-manifest"]]
      Code:
        ZipFile: !FindInMap [Lambda, CodeBlock, LambdaCreateTrainingManifest]
      Handler: !FindInMap [Lambda, Settings, Handler]
      Runtime: !FindInMap [Lambda, Settings, Runtime]
      Timeout: !FindInMap [Lambda, Settings, Timeout]
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          parameter_store_path: !Join ["/", ["",!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], ""]]
  LambdaTrainDeployModel:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "train-deploy-model"]]
      Code:
        ZipFile: !FindInMap [Lambda, CodeBlock, LambdaTrainDeployModel]
      Handler: !FindInMap [Lambda, Settings, Handler]
      Runtime: !FindInMap [Lambda, Settings, Runtime]
      Timeout: !FindInMap [Lambda, Settings, Timeout]
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          parameter_store_path: !Join ["/", ["",!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], ""]]
  LambdaS3EventTrigger:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "s3-event-trigger"]]
      Code:
        ZipFile: !FindInMap [Lambda, CodeBlock, LambdaS3EventTrigger]
      Handler: !FindInMap [Lambda, Settings, Handler]
      Runtime: !FindInMap [Lambda, Settings, Runtime]
      Timeout: !FindInMap [Lambda, Settings, Timeout]
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          parameter_store_path: !Join ["/", ["",!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], ""]]
  LambdaRekognitionDetectLabel:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "rekognition-detect-label"]]
      Code:
        ZipFile: !FindInMap [Lambda, CodeBlock, LambdaRekognitionDetectLabel]
      Handler: !FindInMap [Lambda, Settings, Handler]
      Runtime: !FindInMap [Lambda, Settings, Runtime]
      Timeout: !FindInMap [Lambda, Settings, Timeout]
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          parameter_store_path: !Join ["/", ["",!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], ""]]
  LambdaA2ICreateHumanLoop:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "a2i-create-humanloop"]]
      Code:
        ZipFile: !FindInMap [Lambda, CodeBlock, LambdaA2ICreateHumanLoop]
      Handler: !FindInMap [Lambda, Settings, Handler]
      Runtime: !FindInMap [Lambda, Settings, Runtime]
      Timeout: !FindInMap [Lambda, Settings, Timeout]
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          parameter_store_path: !Join ["/", ["",!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], ""]]
  LambdaA2IHumanLoopData:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "a2i-humanloop-data"]]
      Code:
        ZipFile: !FindInMap [Lambda, CodeBlock, LambdaA2IHumanLoopData]
      Handler: !FindInMap [Lambda, Settings, Handler]
      Runtime: !FindInMap [Lambda, Settings, Runtime]
      Timeout: !FindInMap [Lambda, Settings, Timeout]
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          parameter_store_path: !Join ["/", ["",!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], ""]]
  LambdaHumanSampling:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "create-human-sampling"]]
      Code:
        ZipFile: !FindInMap [Lambda, CodeBlock, LambdaHumanSampling]
      Handler: !FindInMap [Lambda, Settings, Handler]
      Runtime: !FindInMap [Lambda, Settings, Runtime]
      Timeout: !FindInMap [Lambda, Settings, Timeout]
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          parameter_store_path: !Join ["/", ["",!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], ""]]
  LambdaS3EventTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaS3EventTrigger
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt S3Bucket.Arn
  RekognitionProjectAssets:
    Type: Custom::RekognitionProjectAssets
    Properties:
      ServiceToken: !GetAtt LambdaStageRekognitionAssets.Arn
      StackPrefix: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]]]]
      Bucket: !Ref S3Bucket
      LambdaS3EventTriggerArn: !GetAtt LambdaS3EventTrigger.Arn
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "StepFunctionsRole"]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: states.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "StepFunctionsPolicy"]]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
            Resource:
              - !GetAtt LambdaUpdateEventRules.Arn
              - !GetAtt LambdaCheckAutoTraining.Arn
              - !GetAtt LambdaCreateTrainingManifest.Arn
              - !GetAtt LambdaTrainDeployModel.Arn
              - !GetAtt LambdaRekognitionDetectLabel.Arn
              - !GetAtt LambdaA2ICreateHumanLoop.Arn
              - !GetAtt LambdaA2IHumanLoopData.Arn
              - !GetAtt LambdaHumanSampling.Arn
  StepFunctionsProjectStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "project-state-machine"]]
      DefinitionString: !FindInMap [StepFunctions, Definition, ProjectStateMachine]
      DefinitionSubstitutions:
        LambdaUpdateEventRules: !GetAtt LambdaUpdateEventRules.Arn
        LambdaCheckAutoTraining: !GetAtt LambdaCheckAutoTraining.Arn
        LambdaCreateTrainingManifest: !GetAtt LambdaCreateTrainingManifest.Arn
        LambdaTrainDeployModel: !GetAtt LambdaTrainDeployModel.Arn
        LambdaRekognitionDetectLabel: !GetAtt LambdaRekognitionDetectLabel.Arn
        LambdaA2ICreateHumanLoop: !GetAtt LambdaA2ICreateHumanLoop.Arn
        LambdaA2IHumanLoopData: !GetAtt LambdaA2IHumanLoopData.Arn
        LambdaCheckHumanSampling: !GetAtt LambdaHumanSampling.Arn
      RoleArn: !GetAtt StepFunctionsRole.Arn
  ParameterSystemVariables:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Do NOT modify this value. This is a reserved parameter consisting of environmental variables and operation data. The value is used and updated by Lambda functions.
      Name: !Join ["/", ["", !Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "For-System-Use-Only"]]
      Type: String
      Value: !Sub |
        {
          "s3_bucket": "${S3Bucket}",
          "events_scheduled_rule": "${EventsRuleScheduledPoll}",
          "sampling_scheduled_rule": "${EventsRuleSamplingPoll}",
          "rekognition_project_arn": "${RekognitionProjectAssets.ProjectArn}",
          "sns-topic": "${SNSTopicRekognition}",
          "state_machine_arn": "${StepFunctionsProjectStateMachine}",
          "previous_trained_images": 0,
          "a2i_workflow": false,
          "dynamodb_table": "${DyanmoDBInferenceA2ILogs}",
          "dynamodb_table_GSI": "Sampled_GSI"
        }
  ParameterAutoModelTraining:
    Type: AWS::SSM::Parameter
    Properties:
      Description: This value (true/false) determines whether automatic model training is enabled or disabled. When this value is updated to true, a Lambda function enables the EventBride Schedule Rule. When the value is updated to false, a Lambda function disables the EventBride Schedule Rule.
      Name: !Join ["/", ["", !Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "Enable-Automatic-Training"]]
      Type: String
      Value: true
  ParameterAutoModelTrainingPollFrequency:
    Type: AWS::SSM::Parameter
    Properties:
      Description: This is the polling frequency (in integer minutes) on how often the Amazon Step Functions state machine is triggered to initiate the check for automatic model training. As you update this value, the value is applied to the Amazon EventBridge schedule rule by a Lambda function.
      Name: !Join ["/", ["", !Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "Automatic-Training-Poll-Frequency"]]
      Type: String
      Value: 720
  ParameterMinimumF1Score:
    Type: AWS::SSM::Parameter
    Properties:
      Description: This value is the minimum F1 Score (Float 0.00-1.00) that evaluate a newly trained model for deployment. If the F1 Score is greater or equal to the minimum F1 Score, the model will be automatically deployed. If not, the model is marked as failed training.
      Name: !Join ["/", ["", !Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "Minimum-F1-Score"]]
      Type: String
      Value: 0.8
  ParameterAutoA2IWorkflow:
    Type: AWS::SSM::Parameter
    Properties:
      Description: This value (true/false) determines whether an A2I human labeling task is enabled or disabled. If true or enabled, an A2I human labeling task is created when the confidence level from the custom label detection result less than the minimum acceptable confidence level.
      Name: !Join ["/", ["", !Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "Enable-A2I-Workflow"]]
      Type: String
      Value: true
  ParameterMinimumLabelDetectionConfidence:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Rekognition Custom Labels returns a Confidence between 0-100 on each detection. The Minimum Confidence (Float 0.00-100.00) determines whether a detection result is acceptable. If the detection Confidence is greater than or equal to the Minimum Confidence, then the detection is accepted. If not, the image is sent to A2I process, provided that Enable-A2I-Workflow is enabled.
      Name: !Join ["/", ["", !Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "Minimum-Label-Detection-Confidence"]]
      Type: String
      Value: 70.0
  ParameterMinimumUntrainedImages:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The value (Int) represents the minimum number of untrained or newly added images that will qualify the state machine to start a new model training. At the instance the EventBridge schedule rule is triggered, the state machine invokes a Lambda function to first determine the total number of training images in the designated S3 folder. Next it retrieves the value "previous_trained_images" from the parameter "For-System-Use-Only". If the difference between the total number of images in S3 and the previous_trained_images is greater than or equal to minimum untrained images, then it will trigger a new model training. On a successful training, a Lambda updates the previous_trained_images with the current total number of images trained.
      Name: !Join ["/", ["", !Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "Minimum-Untrained-Images"]]
      Type: String
      Value: 10
  ParameterMinimumInferenceUnits:
    Type: AWS::SSM::Parameter
    Properties:
      Description: This value (Int 1-5), with a minimum of 1, inference unit to use for the running Rekognition Customs Labelsmodel. A single inference unit represents 1 hour of processing and can support up to 5 Transaction Pers Second (TPS). Use a higher number to increase the TPS throughput of your model. You are charged for the number of inference units that you use.
      Name: !Join ["/", ["", !Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "Minimum-Inference-Units"]]
      Type: String
      Value: 1
  ParameterAutoHumanSampling:
    Type: AWS::SSM::Parameter
    Properties:
      Description: This value (true/false) determines whether automatic human sampling is enabled/disabled. When this value is updated to true, a Lambda function enables the EventBride Schedule rule. When the value is updated to false, a Lambda function disables the EventBride Schedule rule.
      Name: !Join ["/", ["", !Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "Enable-Automatic-Human-Sampling"]]
      Type: String
      Value: true
  ParameterAutoHumanSamplingPollFrequency:
    Type: AWS::SSM::Parameter
    Properties:
      Description: This is the polling frequency (in integer minutes) on how often the Amazon EventBridge Schedule rule is triggered to initiate the check for human sampling. As you update this value, the value is applied to the rule by an AWS Lambda function.
      Name: !Join ["/", ["", !Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "Automatic-Human-Sampling-Frequency"]]
      Type: String
      Value: 720
  ParameterHumanSamplingInternval:
    Type: AWS::SSM::Parameter
    Properties:
      Description:  This value (Int) represents the minimum number of new Rekognition Custom Labelsdetections since the last human sampled detection before a new human sample is needed. If a new detection meets the interval requirement, it is marked for human sampling. An Amazon A2I human workflow is created, if a human workflow does not exist already.
      Name: !Join ["/", ["", !Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "Human-Sampling-Interval"]]
      Type: String
      Value: 1000
  EventsTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "EventsTriggerRole"]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "EventsTriggerPolicy"]]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: states:StartExecution
            Resource: !Ref StepFunctionsProjectStateMachine
  EventsRuleScheduledPoll:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "scheduled-poll"]]
      ScheduleExpression: rate(600 minutes)
      Targets:
        - Arn: !Ref StepFunctionsProjectStateMachine
          Id: !GetAtt StepFunctionsProjectStateMachine.Name
          RoleArn: !GetAtt EventsTriggerRole.Arn
  EventsRuleSamplingPoll:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "sampling-poll"]]
      ScheduleExpression: rate(600 minutes)
      Targets:
        - Arn: !Ref StepFunctionsProjectStateMachine
          Id: !GetAtt StepFunctionsProjectStateMachine.Name
          RoleArn: !GetAtt EventsTriggerRole.Arn
  EventsRuleParameterStore:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "paramater-store"]]
      EventPattern: !Sub |
        {
          "source": ["aws.ssm"],
          "detail-type": ["Parameter Store Change"],
          "detail": {
            "name": [
              "${ParameterAutoModelTrainingPollFrequency}",
              "${ParameterAutoHumanSamplingPollFrequency}",
              "${ParameterAutoModelTraining}",
              "${ParameterAutoHumanSampling}"
            ],
            "operation": ["Update"]
          }
        }
      Targets:
        - Arn: !Ref StepFunctionsProjectStateMachine
          Id: !GetAtt StepFunctionsProjectStateMachine.Name
          RoleArn: !GetAtt EventsTriggerRole.Arn
  FlowDefinitionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "Flow-Definition-Role"]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: sagemaker.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "Flow-Definition-Policy"]]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            Resource: !Join ["/", [!GetAtt S3Bucket.Arn, "*"]]
  CognitoUserPool:
    Condition: CreateWorkTeam
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True
      UserPoolName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "user-pool"]]
  CognitoUserPoolUser:
    Condition: CreateWorkTeam
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserAttributes:
        - Name: email
          Value: !Ref SNSEmail
      Username: !Ref SNSEmail
      UserPoolId: !Ref CognitoUserPool
  CognitoUserPoolGroup:
    Condition: CreateWorkTeam
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "user-group"]]
      UserPoolId: !Ref CognitoUserPool
  CognitoUserPoolUserToGroupAttachment:
    Condition: CreateWorkTeam
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref CognitoUserPoolGroup
      Username: !Ref CognitoUserPoolUser
      UserPoolId: !Ref CognitoUserPool
  CognitoUserPoolDomain:
    Condition: CreateWorkTeam
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Join ["-", ["a2i", !Select [6, !Split ['-', !Ref AWS::StackId]]]]
      UserPoolId: !Ref CognitoUserPool
  CognitoUserPoolClient:
    Condition: CreateWorkTeam
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "app-client"]]
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      CallbackURLs:
        - http://localhost
      DefaultRedirectURI:
        - http://localhost
      LogoutURLs:
        - http://localhost
      PreventUserExistenceErrors: ENABLED
      DefaultRedirectURI: http://localhost
      GenerateSecret: true
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref CognitoUserPool
  A2IWorkteam:
    Condition: CreateWorkTeam
    Type: AWS::SageMaker::Workteam
    Properties:
      Description: Rekognition Custom Labels A2I Demo
      MemberDefinitions:
        - CognitoMemberDefinition:
            CognitoClientId: !Ref CognitoUserPoolClient
            CognitoUserGroup: !Ref CognitoUserPoolGroup
            CognitoUserPool: !Ref CognitoUserPool
      WorkteamName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "a2i-work-team"]]
  LambdaStageA2IAssets:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]], "stage-a2i-assets"]]
      Code:
        ZipFile: !FindInMap [Lambda, CodeBlock, LambdaStageA2IAssets]
      Handler: !FindInMap [Lambda, Settings, Handler]
      Runtime: !FindInMap [Lambda, Settings, Runtime]
      Timeout: !FindInMap [Lambda, Settings, Timeout]
      Role: !GetAtt LambdaExecutionRole.Arn
  A2IWorkFlowAssets:
    Type: Custom::A2IWorkFlowAssets
    Properties:
      ServiceToken: !GetAtt LambdaStageA2IAssets.Arn
      StackPrefix: !Join ["-", [!Ref AWS::StackName, !Select [6, !Split ['-', !Ref AWS::StackId]]]]
      TaskUiTemplate: !FindInMap [A2I, Template, TaskUiTemplate]
      WorkTeam: !If [CreateWorkTeam, !GetAtt A2IWorkteam.WorkteamName, !Ref A2IPrivateTeamName]
      FlowDefinitionRole: !GetAtt FlowDefinitionRole.Arn
      S3Bucket: !Ref S3Bucket
      ParameterName: !Ref ParameterSystemVariables
Outputs:
  A2IWorkteam:
    Value: !GetAtt A2IWorkteam.WorkteamName
    Condition: CreateWorkTeam
  RekogntionProjectArn:
    Value: !GetAtt RekognitionProjectAssets.ProjectArn
  S3Bucket:
    Value: !Ref S3Bucket
  S3BucketArn:
    Value: !GetAtt S3Bucket.Arn
  SNSEmail:
    Value: !Ref SNSEmail
Mappings:
  Lambda:
    Settings:
      Runtime: python3.9
      Timeout: 15
      Handler: index.handler
    CodeBlock:
      LambdaStageRekognitionAssets: |
        import cfnresponse
        import boto3
        import json
        import os
        rekognition=boto3.client('rekognition')
        s3 = boto3.client('s3')
        ssm = boto3.client('ssm')
        def handler(event, context):
          responseData = {}
          responseData['ProjectArn'] = 'Deleted'
          project_name=event['ResourceProperties']['StackPrefix'] + '-custom-labels-project'
          if event['RequestType'] == 'Create':
            bucket=event['ResourceProperties']['Bucket']
            lambda_arn=event['ResourceProperties']['LambdaS3EventTriggerArn']
            try:
              s3.put_object(Bucket=bucket, Key='images_labeled_by_folder/')
              s3.put_object(Bucket=bucket, Key='a2i-human-loop-data/')
              s3.put_object(Bucket=bucket, Key='images_for_detection/')
              s3.put_object(Bucket=bucket, Key='manifests/')
              s3.put_object(Bucket=bucket, Key='evaluation/')
              s3.put_bucket_notification_configuration(
                Bucket=bucket,
                NotificationConfiguration={
                  'LambdaFunctionConfigurations': [
                    {
                      'LambdaFunctionArn': lambda_arn,
                      'Events': ['s3:ObjectCreated:Put'],
                      'Filter': {'Key': {'FilterRules': [{'Name': 'prefix', 'Value': 'images_for_detection/'}]}}
                    },
                    {
                      'LambdaFunctionArn': lambda_arn,
                      'Events': ['s3:ObjectCreated:Put'],
                      'Filter': {'Key': {'FilterRules': [{'Name': 'prefix', 'Value': 'a2i-human-loop-data/'}, {'Name': 'suffix', 'Value': '.json'}]}}
                    }
                  ]
                }
              )
              response=rekognition.create_project(ProjectName=project_name)
              responseData['ProjectArn'] = response['ProjectArn']
            except:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
            else:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
          else:
            try:
              parameter_name = os.environ['parameter_store_path'] + 'For-System-Use-Only'
              response = ssm.get_parameter(Name=parameter_name)
              parameter =  json.loads(response['Parameter']['Value'])
              responseData['ProjectArn'] = parameter['rekognition_project_arn']
              if event['RequestType'] == 'Delete':
                response = rekognition.describe_project_versions(ProjectArn=responseData['ProjectArn'])
                for project_version in response['ProjectVersionDescriptions']:
                  if project_version['Status'] == 'RUNNING':
                    rekognition.stop_project_version(ProjectVersionArn=project_version['ProjectVersionArn'])
            except:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            else:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
          return {'message': responseData}
      LambdaUpdateEventRules: |
        import json
        import os
        import boto3
        ssm = boto3.client('ssm')
        events = boto3.client('events')
        sns = boto3.client('sns')
        def get_parameter(name):
            response = ssm.get_parameter(
                Name=os.environ['parameter_store_path']+name
            )
            return json.loads(response['Parameter']['Value'])
        def publish_message(sns_subject, sns_message, topic_arn):
            response = sns.publish(
                TopicArn=topic_arn,
                Message=sns_message,
                Subject=sns_subject
            )
        def handler(event, context):
            sys_vars = get_parameter('For-System-Use-Only')
            if 'Automatic-Training-Poll-Frequency' in event['detail']['name']:
                resource = sys_vars['events_scheduled_rule']
                value = 'rate(' + str(get_parameter('Automatic-Training-Poll-Frequency')) + ' minutes)'
                events_response = events.put_rule(Name=resource, ScheduleExpression=value)
            elif 'Automatic-Human-Sampling-Frequency' in event['detail']['name']:
                resource = sys_vars['sampling_scheduled_rule']
                value = 'rate(' + str(get_parameter('Automatic-Human-Sampling-Frequency')) + ' minutes)'
                events_response = events.put_rule(Name=resource, ScheduleExpression=value)
            elif 'Enable-Automatic-Training' in event['detail']['name']:
                resource = sys_vars['events_scheduled_rule']
                value = str(get_parameter('Enable-Automatic-Training'))
                if value in ['True', 'true', 'TRUE']:
                    events_response = events.enable_rule(Name=resource)
                else:
                    events_response = events.disable_rule(Name=resource)
            elif 'Enable-Automatic-Human-Sampling' in event['detail']['name']:
                resource = sys_vars['sampling_scheduled_rule']
                value = str(get_parameter('Enable-Automatic-Human-Sampling'))
                if value in ['True', 'true', 'TRUE']:
                    events_response = events.enable_rule(Name=resource)
                else:
                    events_response = events.disable_rule(Name=resource)
            response = {
                'NextTask': 'End',
                'Task': {
                    'Details': 'Parameter Applied',
                    'Parameter': event['detail']['name'],
                    'NewValue': value
                },
                'ResponseMetadata': events_response['ResponseMetadata']
            }
            publish_message('Parameter Store Event', json.dumps(response), sys_vars['sns-topic'])
            return {
                'message': response
            }
      LambdaCheckAutoTraining: |
        import json
        import os
        import boto3
        ssm = boto3.client('ssm')
        s3_resource = boto3.resource('s3')
        sns = boto3.client('sns')
        rekognition = boto3.client('rekognition')
        def get_parameter(name):
            response = ssm.get_parameter(
                Name=os.environ['parameter_store_path']+name
            )
            return json.loads(response['Parameter']['Value'])
        def publish_message(sns_subject, sns_message, topic_arn):
            response = sns.publish(
                TopicArn=topic_arn,
                Message=sns_message,
                Subject=sns_subject
            )
        def handler(event, context):
            sys_vars = get_parameter('For-System-Use-Only')
            next_task = 'End'
            enable_automatic_training = str(get_parameter('Enable-Automatic-Training'))
            minimum_untrained_images = int(get_parameter('Minimum-Untrained-Images'))
            if enable_automatic_training in ['True', 'true', 'TRUE']:
                s3_bucket = sys_vars['s3_bucket']
                bucket = s3_resource.Bucket(s3_bucket)
                image_count = -1
                for object in bucket.objects.filter(Prefix='images_labeled_by_folder/'):
                    image_count += 1
                trained_image = int(sys_vars['previous_trained_images'])
                untrained_images = image_count - trained_image
                if untrained_images >= minimum_untrained_images:
                    project_arn = sys_vars['rekognition_project_arn']
                    response = rekognition.describe_project_versions(ProjectArn=project_arn)
                    next_task = 'CreateManifest'
                    task_details = "New training criteria met."
                    for project_version in response['ProjectVersionDescriptions']:
                        if project_version['Status'] in ['TRAINING_IN_PROGRESS', 'STARTING']:
                            next_task = 'End'
                            task_details = 'Preject Version ' + project_version['ProjectVersionArn'] + ' is currently in training'
                            break
                else:
                    task_details =  'Minimum Number Untrained Images Condition Not Met'
            else:
                task_details =  'Autmatic training option is disabled'
                untrained_images = 'NA'
            response = {
                'NextTask': next_task,
                'Task': {
                    'Details': task_details,
                    'UntrainedImages': untrained_images,
                    'UserSettings': {
                        'EnableAutomaticTraining': enable_automatic_training,
                        'MinimumUntrainedImages': minimum_untrained_images
                    }
                },
                'SystemVariables': sys_vars
            }
            publish_message('Check for Automatic Model Training', json.dumps(response), sys_vars['sns-topic'])
            return {
                'message': response
            }
      LambdaCreateTrainingManifest: |
        import json
        import boto3
        import os
        import datetime
        ssm = boto3.client('ssm')
        s3 = boto3.client('s3')
        paginator = s3.get_paginator('list_objects_v2')
        s3_resource = boto3.resource('s3')
        sns = boto3.client('sns')
        def get_parameter(name):
            response = ssm.get_parameter(
                Name=os.environ['parameter_store_path']+name
            )
            return json.loads(response['Parameter']['Value'])
        def publish_message(sns_subject, sns_message, topic_arn):
            response = sns.publish(
                TopicArn=topic_arn,
                Message=sns_message,
                Subject=sns_subject
            )
        def handler(event, context):
            sys_vars = get_parameter('For-System-Use-Only')
            s3_bucket = sys_vars['s3_bucket']
            image_count = 0
            pages = paginator.paginate(Bucket=s3_bucket)
            f = open("/tmp/manifest.txt", "a")
            for page in pages:
                for image in page['Contents']:
                    object = image['Key'].split("/")
                    if len(object) == 3 and object[0] == 'images_labeled_by_folder':
                        if object[2] != '':
                            creation_date = image['LastModified'].strftime("%Y-%m-%dT%H:%M:%S.0000")
                            json_text = {
                                "source-ref": "s3://" + s3_bucket + "/" + image['Key'],
                                "rekongition-custom-labels-brand-detection": 1,
                                "rekongition-custom-labels-brand-detection-metadata": {
                                    "confidence": 1,
                                    "class-name": object[1],
                                    "human-annotated": "yes",
                                    "creation-date": creation_date,
                                    "type": "groundtruth/image-classification"
                                }
                            }
                            json_object = json.dumps(json_text)
                            f.write(json_object + '\n')
                            image_count += 1
            f.close()
            file_name = 'manifests/groundtruth-' + datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S") + '.manifest'
            s3_resource.meta.client.upload_file('/tmp/manifest.txt', s3_bucket, file_name)
            response = event['message']
            response['NextTask'] = 'CreateProjectVersion'
            response['Task'] = {'Manifest':  file_name, 'TotalImages': image_count}
            publish_message('New Training Manifest Created', json.dumps(response), sys_vars['sns-topic'])
            return {
                'message': response
            }
      LambdaTrainDeployModel: |
        import json
        import boto3
        import os
        import datetime
        ssm = boto3.client('ssm')
        rekognition = boto3.client('rekognition')
        sns = boto3.client('sns')
        def get_parameter(name):
            response = ssm.get_parameter(
                Name=os.environ['parameter_store_path']+name
            )
            return json.loads(response['Parameter']['Value'])
        def publish_message(sns_subject, sns_message, topic_arn):
            response = sns.publish(
                TopicArn=topic_arn,
                Message=sns_message,
                Subject=sns_subject
            )
        def handler(event, context):
            response = event['message']
            project_arn = event['message']['SystemVariables']['rekognition_project_arn']
            s3_bucket = event['message']['SystemVariables']['s3_bucket']
            if event['message']['NextTask'] == 'CreateProjectVersion':
                version_name = datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
                rekognition_response = rekognition.create_project_version(
                    ProjectArn=project_arn,
                    VersionName=version_name,
                    OutputConfig={'S3Bucket':s3_bucket, 'S3KeyPrefix':'evaluation/'},
                    TrainingData={'Assets': [{'GroundTruthManifest': {'S3Object': {'Bucket': s3_bucket,'Name': event['message']['Task']['Manifest']}}},]},
                    TestingData={'AutoCreate': True}
                )
                response['Task']['ProjectVersionArn'] = rekognition_response['ProjectVersionArn']
                response['Task']['VersionName'] = version_name
                next_task = 'DescribeProjectVersions'
            elif event['message']['NextTask'] == 'DescribeProjectVersions':
                version_name = event['message']['Task']['VersionName']
                rekognition_response = rekognition.describe_project_versions(ProjectArn=project_arn, VersionNames=[version_name])
                status = rekognition_response['ProjectVersionDescriptions'][0]['Status']
                if status in ['TRAINING_IN_PROGRESS', 'STARTING']:
                    next_task = 'DescribeProjectVersions'
                elif status == 'TRAINING_COMPLETED':
                    minimum_f1_score = float(get_parameter('Minimum-F1-Score'))
                    if rekognition_response['ProjectVersionDescriptions'][0]['EvaluationResult']['F1Score'] >= minimum_f1_score:
                        next_task = 'StartProjectVersion'
                    else:
                        next_task = 'FailedF1Evaluation'
                        status = next_task
                elif status == 'RUNNING':
                    next_task = 'ModelRunning'
                else:
                    next_task = 'FAILED'
                publish_message('Rekognition Model Status', 'Status: '+status+'\n'+json.dumps(response), event['message']['SystemVariables']['sns-topic'])
            elif event['message']['NextTask'] == 'StartProjectVersion':
                project_version_arn = event['message']['Task']['ProjectVersionArn']
                min_inteference_unit = int(get_parameter('Minimum-Inference-Units'))
                rekognition_response = rekognition.start_project_version(ProjectVersionArn=project_version_arn, MinInferenceUnits=min_inteference_unit)
                next_task = 'DescribeProjectVersions'
            elif event['message']['NextTask'] == 'ModelRunning':
                parameter_name = os.environ['parameter_store_path']+'For-System-Use-Only'
                project_version_arn = event['message']['Task']['ProjectVersionArn']
                event['message']['SystemVariables']['rekognition_project_version_arn'] = project_version_arn
                event['message']['SystemVariables']['previous_trained_images'] = event['message']['Task']['TotalImages']
                ssm_response = ssm.put_parameter(Name=parameter_name, Value=json.dumps(event['message']['SystemVariables']), Type='String',Overwrite=True)
                rekognition_response = rekognition.describe_project_versions(ProjectArn=project_arn)
                for project_version in rekognition_response['ProjectVersionDescriptions']:
                    if project_version['Status'] == 'RUNNING' and project_version['ProjectVersionArn'] != project_version_arn:
                        rekognition.stop_project_version(ProjectVersionArn=project_version['ProjectVersionArn'])
                rekognition_response = rekognition.describe_project_versions(ProjectArn=project_arn)
                next_task = 'Succeed'
            response['NextTask'] = next_task
            response['Response'] = json.loads(json.dumps(rekognition_response, default=str))
            return {
                'message': response
            }
      LambdaRekognitionDetectLabel: |
        import json
        import os
        import boto3
        ssm = boto3.client('ssm')
        sns = boto3.client('sns')
        rekognition = boto3.client('rekognition')
        dynamodb = boto3.client('dynamodb')
        def get_parameter(name):
            response = ssm.get_parameter(
                Name=os.environ['parameter_store_path']+name
            )
            return json.loads(response['Parameter']['Value'])
        def store_detection_results(dynamodb_table, detectlabel_request_id, detectlabel_date, s3_bucket_name, s3_object_key, s3_object_eTag, project_version, detected_label, confidence_level, minimum_confidence_level, A2I):
            response = dynamodb.put_item(
                TableName=dynamodb_table,
                Item={
                    'DetectLabelRequestId': {'S':detectlabel_request_id},
                    'DetectLabelDate': {'S':detectlabel_date},
                    'S3Bucket': {'S':s3_bucket_name},
                    'S3ObjectKey': {'S':s3_object_key},
                    'S3ObjectEtag': {'S':s3_object_eTag},
                    'ProjectVersionArn': {'S':project_version},
                    'DetectedLabel': {'S':detected_label},
                    'DetectedConfidenceLevel': {'N':str(confidence_level)},
                    'MinimumConfidenceLevel': {'N':str(minimum_confidence_level)},
                    'A2IEnabled': {'BOOL':A2I},
                    'Sampled': {'S':'No'}
                }
            )
        def publish_message(sns_subject, sns_message, topic_arn):
            response = sns.publish(
                TopicArn=topic_arn,
                Message=sns_message,
                Subject=sns_subject
            )
        def handler(event, context):
            sys_vars = get_parameter('For-System-Use-Only')
            project_version = sys_vars['rekognition_project_version_arn']
            dynamodb_table = sys_vars['dynamodb_table']
            minimum_confidence_level= float(get_parameter('Minimum-Label-Detection-Confidence'))
            s3_bucket_name=event['s3event']['s3']['bucket']['name']
            s3_object_key=event['s3event']['s3']['object']['key']
            s3_object_eTag=event['s3event']['s3']['object']['eTag']
            s3_event_time=event['s3event']['eventTime']
            rekognition_response = rekognition.detect_custom_labels(
                ProjectVersionArn=project_version,
                Image={
                    'S3Object': {
                        'Bucket': s3_bucket_name,
                        'Name': s3_object_key
                    }
                },
                MaxResults=1,
                MinConfidence=0
            )
            confidence_level = rekognition_response['CustomLabels'][0]['Confidence']
            detected_label = rekognition_response['CustomLabels'][0]['Name']
            detectlabel_request_id = rekognition_response['ResponseMetadata']['RequestId']
            a2i = get_parameter('Enable-A2I-Workflow')
            if confidence_level <  minimum_confidence_level:
                next_task = 'A2I'
                task_details = 'Detection Fail Minimum Confidence Level'
            else:
                next_task = 'End'
                task_details = 'Detection Pass Minimum Confidence Level'
            store_detection_results(dynamodb_table, detectlabel_request_id, s3_event_time, s3_bucket_name, s3_object_key, s3_object_eTag, project_version, detected_label, confidence_level, minimum_confidence_level, a2i)
            response = {
                'NextTask': next_task,
                'Task': {
                    'Details': task_details,
                    'DetectedLabel': detected_label,
                    'DetectedConfidenceLevel': confidence_level,
                    'S3Object': {
                        'Bucket': s3_bucket_name,
                        'Name': s3_object_key
                    },
                    'UserSettings': {
                        'EnableA2IWorkflow': a2i,
                        'MinimumConfidenceLevel': minimum_confidence_level
                    }
                },
                'SystemVariables': sys_vars,
                'ResponseMetadata': rekognition_response['ResponseMetadata']
            }
            publish_message('Rekognition Detect Custome Label', json.dumps(response), sys_vars['sns-topic'])
            return {
                'message': response
            }
      LambdaA2ICreateHumanLoop: |
        import json
        import os
        import boto3
        import uuid
        sns = boto3.client('sns')
        a2i = boto3.client('sagemaker-a2i-runtime')
        ssm = boto3.client('ssm')
        dynamodb = boto3.client('dynamodb')
        def get_parameter(name):
            response = ssm.get_parameter(
                Name=os.environ['parameter_store_path']+name
            )
            return json.loads(response['Parameter']['Value'])
        def publish_message(sns_subject, sns_message, topic_arn):
            response = sns.publish(
                TopicArn=topic_arn,
                Message=sns_message,
                Subject=sns_subject
            )
        def append_a2i_request(dynamodb_table, detectlabel_request_id, human_loop_name, humanloop_request_id):
            response = dynamodb.update_item(
                TableName=dynamodb_table,
                Key={
                    'DetectLabelRequestId': {'S':detectlabel_request_id}
                },
                ExpressionAttributeNames={
                    '#HLN':'HumanLoopName',
                    '#HLRI':'HumanLoopRequestId'
                },
                ExpressionAttributeValues={
                    ':n': {'S':human_loop_name},
                    ':i': {'S':humanloop_request_id}
                },
                UpdateExpression='SET #HLN=:n, #HLRI=:i'
            )
        def handler(event, context):
            sys_vars = get_parameter('For-System-Use-Only')
            dynamodb_table = sys_vars['dynamodb_table']
            detectlabel_request_id=event['message']['ResponseMetadata']['RequestId']
            s3_bucket_name=event['message']['Task']['S3Object']['Bucket']
            s3_object_key=event['message']['Task']['S3Object']['Name']
            detected_label=event['message']['Task']['DetectedLabel']
            detected_confidence_level=event['message']['Task']['DetectedConfidenceLevel']
            human_loop_name=str(uuid.uuid4())
            a2i_response = a2i.start_human_loop(
                HumanLoopName = human_loop_name,
                FlowDefinitionArn = sys_vars['flow_definition_arn'],
                HumanLoopInput = {
                    'InputContent': json.dumps({
                        'source': 'A2I Workflow',
                        'detectLabelRequestId': detectlabel_request_id,
                        'detectedConfidenceLevel': detected_confidence_level,
                        'detectedLabel': detected_label,
                        'taskObject': 's3://'+s3_bucket_name+'/'+s3_object_key
                    })
                }
            )
            humanloop_request_id=a2i_response['ResponseMetadata']['RequestId']
            append_a2i_request(dynamodb_table, detectlabel_request_id, human_loop_name, humanloop_request_id)
            response = {
                'NextTask': 'End',
                'Task': {
                    'Details': 'A2I HumanLoop Created',
                    'Source': 'A2I Workflow',
                    'DetectLabelRequestId': detectlabel_request_id,
                    'DetectedConfidenceLevel': detected_confidence_level,
                    'DetectedLabel': detected_label,
                    'TaskObject': 's3://'+s3_bucket_name+'/'+s3_object_key,
                    'HumanLoopRequestId': humanloop_request_id
                },
                'SystemVariables': sys_vars,
                'ResponseMetadata': a2i_response['ResponseMetadata']
            }
            publish_message('Create A2I HumanLoop', json.dumps(response), sys_vars['sns-topic'])
            return {
                'message': response
            }
      LambdaA2IHumanLoopData: |
        import json
        import os
        import boto3
        s3 = boto3.client('s3')
        s3_resource = boto3.resource('s3')
        ssm = boto3.client('ssm')
        dynamodb = boto3.client('dynamodb')
        sns = boto3.client('sns')
        def get_parameter(name):
            response = ssm.get_parameter(
                Name=os.environ['parameter_store_path']+name
            )
            return json.loads(response['Parameter']['Value'])
        def append_human_results(dynamodb_table, detectlabel_request_id, label, new_key, submission_time):
            response = dynamodb.update_item(
                TableName=dynamodb_table,
                Key={
                    'DetectLabelRequestId': {'S':detectlabel_request_id}
                },
                ExpressionAttributeNames={
                    '#HL':'HumanLabel',
                    '#S3':'CopiedS3ObjectKey',
                    '#AT': 'HumanLableCompletedDate'
                },
                ExpressionAttributeValues={
                    ':h': {'S':label},
                    ':s': {'S':new_key},
                    ':a': {'S':submission_time}
                },
                UpdateExpression='SET #HL=:h, #S3=:s, #AT=:a'
            )
        def publish_message(sns_subject, sns_message, topic_arn):
            response = sns.publish(
                TopicArn=topic_arn,
                Message=sns_message,
                Subject=sns_subject
            )
        def handler(event, context):
            sys_vars = get_parameter('For-System-Use-Only')
            dynamodb_table = sys_vars['dynamodb_table']
            bucket = event['s3event']['s3']['bucket']['name']
            key = event['s3event']['s3']['object']['key']
            s3_response = s3.get_object(Bucket = bucket, Key = key)
            s3_json = json.loads(s3_response['Body'].read())
            new_key=''
            task_details =  'Error: Unable to process humanLoop data'
            label = 'NA'
            submission_time = 'NA'
            if len(s3_json['humanAnswers']) != 0:
                label = s3_json['humanAnswers'][0]['answerContent']['crowd-image-classifier']['label']
                if label != 'None of the Above' and s3_json['inputContent']['source'] == 'A2I Workflow':
                    taskObject = s3_json['inputContent']['taskObject']
                    bucket, key = taskObject.replace("s3://", "").split("/", 1)
                    copy_source = {'Bucket': bucket, 'Key': key}
                    image_name = 'humanLoopName-' + s3_json['humanLoopName'] + '-' + taskObject.split('/')[-1]
                    new_key = 'images_labeled_by_folder/' + label + '/' + image_name
                    s3_resource.meta.client.copy(copy_source, sys_vars['s3_bucket'], new_key)
                    task_details =  'Image copied to training folder'
                else:
                    task_details =  'Image NOT copied to training folder'
            detectlabel_request_id=s3_json['inputContent']['detectLabelRequestId']
            submission_time = s3_json['humanAnswers'][0]['submissionTime']
            append_human_results(dynamodb_table, detectlabel_request_id, label, new_key, submission_time)
            response = {
                'NextTask': 'End',
                'Task': {
                    'Details': task_details,
                    'HumanLoopSource': s3_json['inputContent']['source'],
                    'HumanLabel': label
                },
                'SystemVariables': sys_vars,
                'ResponseMetadata': s3_json
            }
            publish_message('Process HumanLoop Labeled Data', json.dumps(response), sys_vars['sns-topic'])
            return {
                'message': response
            }
      LambdaHumanSampling: |
        import json
        import os
        import boto3
        import uuid
        import datetime
        sns = boto3.client('sns')
        a2i = boto3.client('sagemaker-a2i-runtime')
        ssm = boto3.client('ssm')
        dynamodb = boto3.client('dynamodb')
        def get_parameter(name):
            response = ssm.get_parameter(
                Name=os.environ['parameter_store_path']+name
            )
            return json.loads(response['Parameter']['Value'])
        def get_parameter_date(name):
            response = ssm.get_parameter(
                Name=os.environ['parameter_store_path']+name
            )
            return response['Parameter']['LastModifiedDate'].strftime("%Y-%m-%dT%H:%M:%-S.000Z")
        def publish_message(sns_subject, sns_message, topic_arn):
            response = sns.publish(
                TopicArn=topic_arn,
                Message=sns_message,
                Subject=sns_subject
            )
        def update_human_sampling(dynamodb_table, detectlabel_request_id, human_loop_name, humanloop_request_id):
            response = dynamodb.update_item(
                TableName=dynamodb_table,
                Key={
                    'DetectLabelRequestId': {'S':detectlabel_request_id}
                },
                ExpressionAttributeNames={
                    '#HLN':'HumanLoopName',
                    '#HLRI':'HumanLoopRequestId',
                    '#HSAM':'Sampled'
                },
                ExpressionAttributeValues={
                    ':n': {'S':human_loop_name},
                    ':i': {'S':humanloop_request_id},
                    ':m': {'S':'Yes'}
                },
                UpdateExpression='SET #HLN=:n, #HLRI=:i, #HSAM=:m'
            )
        def query_gsi(dynamodb_table, dynamodb_table_GSI, sampled, scan_index_forward, limit, query_date):
            if query_date == '':
                query_date = '2000-01-01T00:00:00.000Z'
            response = dynamodb.query(
                TableName=dynamodb_table,
                IndexName=dynamodb_table_GSI,
                KeyConditionExpression='Sampled=:s AND DetectLabelDate>:d',
                ExpressionAttributeValues={
                    ':s': {'S':sampled},
                    ':d': {'S':query_date}
                },
                ScanIndexForward=scan_index_forward,
                Limit=limit
            )
            return response
        def query_table(dynamodb_table, detectlabel_request_id):
            response = dynamodb.query(
                TableName=dynamodb_table,
                KeyConditionExpression='DetectLabelRequestId=:i',
                ExpressionAttributeValues={
                    ':i': {'S':detectlabel_request_id}
                },
            )
            return response
        def handler(event, context):
            sys_vars = get_parameter('For-System-Use-Only')
            dynamodb_table = sys_vars['dynamodb_table']
            dynamodb_table_GSI = sys_vars['dynamodb_table_GSI']
            a2i_response = {"ResponseMetadata": ""}
            if 'message' in event:
                last_sample_date = event['message']['Task']['NewHumanSample']['DetectLabelDate']
                last_detect_label_request_id = event['message']['Task']['NewHumanSample']['DetectLabelRequestId']
            else:
                last_sample_date = get_parameter_date('Enable-Automatic-Human-Sampling')
                last_detect_label_request_id = ''
                query_results = query_gsi(dynamodb_table, dynamodb_table_GSI, 'Yes', False, 1, last_sample_date)
                if query_results['Count'] == 1:
                    last_sample_date =  query_results['Items'][0]['DetectLabelDate']['S']
                    last_detect_label_request_id = query_results['Items'][0]['DetectLabelRequestId']['S']
            human_sampling_interval = int(get_parameter('Human-Sampling-Interval'))
            query_results = query_gsi(dynamodb_table, dynamodb_table_GSI, 'No', True, human_sampling_interval, last_sample_date)
            if query_results['Count'] < human_sampling_interval:
                next_task = 'End'
                task_details = 'Minimum human sampling interval not met'
                new_sample_date = ''
                new_detect_label_request_id = ''
            else:
                next_task = 'Check for new human sampling'
                new_detect_label_request_id = query_results['Items'][human_sampling_interval-1]['DetectLabelRequestId']['S']
                query_item = query_table(dynamodb_table, new_detect_label_request_id)
                new_sample_date = query_item['Items'][0]['DetectLabelDate']['S']
                if 'HumanLoopName' in query_item['Items'][0] :
                    task_details = 'Minimum human sampling interval met. A2I already exist.'
                    human_loop_name = query_item['Items'][0]['HumanLoopName']['S']
                    humanloop_request_id = query_item['Items'][0]['HumanLoopRequestId']['S']
                    a2i_response = {"ResponseMetadata": "NA"}
                else:
                    task_details = 'Minimum human sampling interval met. A2I created.'
                    human_loop_name = str(uuid.uuid4())
                    a2i_response = a2i.start_human_loop(
                        HumanLoopName = human_loop_name,
                        FlowDefinitionArn = sys_vars['flow_definition_arn'],
                        HumanLoopInput = {
                            'InputContent': json.dumps({
                                'source': 'Human Sampling',
                                'detectLabelRequestId': new_detect_label_request_id,
                                'detectedConfidenceLevel': query_item['Items'][0]['DetectedConfidenceLevel']['N'],
                                'detectedLabel': query_item['Items'][0]['DetectedLabel']['S'],
                                'taskObject': 's3://'+query_item['Items'][0]['S3Bucket']['S']+'/'+query_item['Items'][0]['S3ObjectKey']['S']
                            })
                        }
                    )
                    humanloop_request_id = a2i_response['ResponseMetadata']['RequestId']
                update_human_sampling(dynamodb_table, new_detect_label_request_id, human_loop_name, humanloop_request_id)
            response = {
                'NextTask': next_task,
                'Task': {
                    'Details': task_details,
                    'NewDetectLabelRequests': query_results['Count'],
                    'HumanSamplingInternal': human_sampling_interval,
                    'LastHumanSample': {
                        'DetectLabelRequestId': last_detect_label_request_id,
                        'DetectLabelDate': last_sample_date
                    },
                    'NewHumanSample': {
                        'DetectLabelRequestId': new_detect_label_request_id,
                        'DetectLabelDate': new_sample_date
                    }
                },
                'ResponseMetadata': a2i_response['ResponseMetadata']
            }
            publish_message('Human Sampling Event', json.dumps(response), sys_vars['sns-topic'])
            return {
                'message': response
            }
      LambdaS3EventTrigger: |
        import json
        import os
        import uuid
        import boto3
        sfn = boto3.client('stepfunctions')
        ssm = boto3.client('ssm')
        def get_parameter(parameter_name):
            response = ssm.get_parameter(Name=parameter_name)
            return json.loads(response['Parameter']['Value'])
        def handler(event, context):
            parameter_name = os.environ['parameter_store_path'] + 'For-System-Use-Only'
            sys_vars = get_parameter(parameter_name)
            for item in event['Records']:
                input = {}
                if 'images_for_detection' in item['s3']['object']['key']:
                    input['source'] = 's3-detection-event'
                elif 'a2i-human-loop-data' in item['s3']['object']['key']:
                    input['source'] = 's3-a2i-event'
                else:
                    input['source'] = ''
                input['s3event'] = item
                response = sfn.start_execution(
                    stateMachineArn = sys_vars['state_machine_arn'],
                    name = str(uuid.uuid4()),
                    input = json.dumps(input, default=str)
                )
            return {
                'message': json.dumps(response, default=str)
            }
      LambdaStageA2IAssets: |
        import cfnresponse
        import json
        import boto3
        sagemaker = boto3.client('sagemaker')
        ssm = boto3.client('ssm')
        def get_parameter(parameter_name):
            response = ssm.get_parameter(Name=parameter_name)
            parameter_value = json.loads(response['Parameter']['Value'])
            return parameter_value
        def handler(event, context):
            responseData = {}
            responseData['HumanTaskUiArn'] = 'Resource Deleted'
            responseData['FlowDefinitionArn'] = 'Resource Deleted'
            parameter_name = event['ResourceProperties']['ParameterName']
            prefix = event['ResourceProperties']['StackPrefix'].lower()
            task_ui_name = prefix + '-task-ui'
            flow_definition_name = prefix + '-flow-definition'
            if event['RequestType'] == 'Create':
                try:
                    response = sagemaker.create_human_task_ui(
                        HumanTaskUiName=task_ui_name,
                        UiTemplate={
                            'Content': event['ResourceProperties']['TaskUiTemplate']
                        }
                    )
                    responseData['HumanTaskUiArn'] = response['HumanTaskUiArn']
                    response = sagemaker.describe_workteam(WorkteamName=event['ResourceProperties']['WorkTeam'])
                    response = sagemaker.create_flow_definition(
                        FlowDefinitionName = flow_definition_name,
                        RoleArn= event['ResourceProperties']['FlowDefinitionRole'],
                        HumanLoopConfig= {
                            "WorkteamArn": response['Workteam']['WorkteamArn'],
                            "HumanTaskUiArn": responseData['HumanTaskUiArn'],
                            "TaskCount": 1,
                            "TaskDescription": "Identify Amazon Logo In Images",
                            "TaskTitle": "Identify Amazon Logo",
                        },
                        OutputConfig={
                            "S3OutputPath": 's3://'+ event['ResourceProperties']['S3Bucket'] + '/a2i-human-loop-data/'
                        }
                    )
                    responseData['FlowDefinitionArn'] = response['FlowDefinitionArn']
                    parameter_value = get_parameter(parameter_name)
                    parameter_value['flow_definition_arn'] = responseData['FlowDefinitionArn']
                    ssm.put_parameter(Name=parameter_name, Value=json.dumps(parameter_value), Type='String',Overwrite=True)
                except:
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                else:
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            else:
                try:
                    response = sagemaker.describe_flow_definition(FlowDefinitionName=flow_definition_name)
                    responseData['FlowDefinitionArn'] = response['FlowDefinitionArn']
                    response = sagemaker.describe_human_task_ui(HumanTaskUiName=task_ui_name)
                    responseData['HumanTaskUiArn'] = response['HumanTaskUiArn']
                    if event['RequestType'] == 'Delete':
                        sagemaker.delete_flow_definition(FlowDefinitionName=flow_definition_name)
                        sagemaker.delete_human_task_ui(HumanTaskUiName=task_ui_name)
                        parameter_value = get_parameter(parameter_name)
                        parameter_value['flow_definition_arn'] = ''
                        response = ssm.put_parameter(Name=parameter_name, Value=json.dumps(parameter_value), Type='String',Overwrite=True)
                except:
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                else:
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            return {'message': responseData}
  StepFunctions:
    Definition:
      ProjectStateMachine: |
        {
          "Comment": "Rekognition Custom Labels with A2I Workflows",
          "StartAt": "Event",
          "States": {
            "Event": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.source",
                  "StringEquals": "aws.ssm",
                  "Next": "Parameter Store"
                },
                {
                  "Variable": "$.source",
                  "StringEquals": "s3-detection-event",
                  "Next": "Rekongition Detection"
                },
                {
                  "Variable": "$.source",
                  "StringEquals": "s3-a2i-event",
                  "Next": "A2I HumanLoop Data"
                },
                {
                  "Variable": "$.resources[0]",
                  "StringMatches": "arn:aws:events:*-scheduled-poll",
                  "Next": "Rekongition Model"
                },
                {
                  "Variable": "$.resources[0]",
                  "StringMatches": "arn:aws:events:*-sampling-poll",
                  "Next": "Human Sampling"
                }
              ],
              "Default": "Unknown Event"
            },
            "Parameter Store": {
              "Type": "Pass",
              "Next": "Apply Parameter"
            },
            "Apply Parameter": {
              "Type": "Task",
              "Resource": "${LambdaUpdateEventRules}",
              "End": true
            },
            "Rekongition Model": {
              "Type": "Task",
              "Resource": "${LambdaCheckAutoTraining}",
              "Next": "Check New Training"
            },
            "Check New Training": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.message.NextTask",
                  "StringEquals": "CreateManifest",
                  "Next": "Initiate Training"
                }
              ],
              "Default": "No New Training"
            },
            "No New Training": {
              "Type": "Succeed"
            },
            "Initiate Training": {
              "Type": "Pass",
              "Next": "Create Manifest"
            },
            "Create Manifest": {
              "Type": "Task",
              "Resource": "${LambdaCreateTrainingManifest}",
              "Next": "Create Project Version"
            },
            "Create Project Version": {
              "Type": "Task",
              "Resource": "${LambdaTrainDeployModel}",
              "Next": "Wait for Training"
            },
            "Wait for Training": {
              "Type": "Wait",
              "Seconds": 300,
              "Next": "Get Training Status"
            },
            "Get Training Status": {
              "Type": "Task",
              "Resource": "${LambdaTrainDeployModel}",
              "Next": "Training-in-Progress"
            },
            "Training-in-Progress": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.message.NextTask",
                  "StringEquals": "DescribeProjectVersions",
                  "Next": "Wait for Training"
                },
                {
                  "Variable": "$.message.NextTask",
                  "StringEquals": "StartProjectVersion",
                  "Next": "Training Completed"
                },
                {
                  "Variable": "$.message.NextTask",
                  "StringEquals": "FailedF1Evaluation",
                  "Next": "Failed F1 Score"
                }
              ],
              "Default": "Failure"
            },
            "Training Completed": {
              "Type": "Pass",
              "Next": "Start Model"
            },
            "Failed F1 Score": {
              "Type": "Pass",
              "Next": "Failure"
            },
            "Start Model": {
              "Type": "Task",
              "Resource": "${LambdaTrainDeployModel}",
              "Next": "Wait for Start"
            },
            "Wait for Start": {
              "Type": "Wait",
              "Seconds": 300,
              "Next": "Get Model Status"
            },
            "Get Model Status": {
              "Type": "Task",
              "Resource": "${LambdaTrainDeployModel}",
              "Next": "Starting-in-Progress"
            },
            "Starting-in-Progress": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.message.NextTask",
                  "StringEquals": "DescribeProjectVersions",
                  "Next": "Wait for Start"
                },
                {
                  "Variable": "$.message.NextTask",
                  "StringEquals": "ModelRunning",
                  "Next": "Model Started"
                }
              ],
              "Default": "Failure"
            },
            "Model Started": {
              "Type": "Pass",
              "Next": "Deploy Endpoint"
            },
            "Deploy Endpoint": {
              "Type": "Task",
              "Resource": "${LambdaTrainDeployModel}",
              "End": true
            },
            "Rekongition Detection": {
              "Type": "Task",
              "Resource": "${LambdaRekognitionDetectLabel}",
              "Next": "Check Confidence"
            },
            "Check Confidence": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.message.NextTask",
                  "StringEquals": "End",
                  "Next": "Pass Confidence"
                }
              ],
              "Default": "Failed Confidence"
            },
            "Failed Confidence": {
              "Type": "Pass",
              "Next": "Check A2I"
            },
            "Check A2I": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.message.Task.UserSettings.EnableA2IWorkflow",
                  "BooleanEquals": true,
                  "Next": "Create HumanLoop"
                }
              ],
              "Default": "A2I Off"
            },
            "A2I Off": {
              "Type": "Pass",
              "End": true
            },
            "Create HumanLoop": {
              "Type": "Task",
              "Resource": "${LambdaA2ICreateHumanLoop}",
              "End": true
            },
            "Pass Confidence": {
              "Type": "Succeed"
            },
            "A2I HumanLoop Data": {
              "Type": "Task",
              "Resource": "${LambdaA2IHumanLoopData}",
              "Next": "Add Training Image"
            },
            "Add Training Image": {
              "Type": "Pass",
              "End": true
            },
            "Human Sampling": {
              "Type": "Pass",
              "Next": "Check Last Sample"
            },
            "Check Last Sample": {
              "Type": "Task",
              "Resource": "${LambdaCheckHumanSampling}",
              "Next": "Check Sampling Interval"
            },
            "Check Sampling Interval": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.message.NextTask",
                  "StringEquals": "End",
                  "Next": "No New Sample"
                }
              ],
              "Default": "Create Human Sample"
            },
            "Create Human Sample": {
              "Type": "Wait",
              "Seconds": 5,
              "Next": "Check Last Sample"
            },
            "No New Sample": {
              "Type": "Succeed"
            },
            "Failure": {
              "Type": "Fail"
            },
            "Unknown Event": {
              "Type": "Fail"
            }
          }
        }
  A2I:
      Template:
        TaskUiTemplate: |
          <script src="https://assets.crowd.aws/crowd-html-elements.js"></script>
          <crowd-form>
            <crowd-image-classifier
              name="crowd-image-classifier"
              src="{{ task.input.taskObject | grant_read_access }}"
              header="Please select the correct Amazon Logo"
              categories="['aws_logo', 'amazon_logo', 'wholefood_logo','None of the Above']"
            >
              <full-instructions header="Classification Instructions">
                <p>Please select the correct Amazon logo for this image. Select None of Above if the image is not an Amazon logo cannot be identified.</p>
              </full-instructions>
              <short-instructions>
                <p>Please select the correct Amazon logo for this image. Select None of Above if the image is not an Amazon logo cannot be identified..</p>
              </short-instructions>
            </crowd-image-classifier>
          </crowd-form>
