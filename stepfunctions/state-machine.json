{
  "Comment": "Rekognition Custom Labels with A2I Workflows",
  "StartAt": "Event",
  "States": {
    "Event": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.source",
          "StringEquals": "aws.ssm",
          "Next": "Parameter Store"
        },
        {
          "Variable": "$.source",
          "StringEquals": "s3-detection-event",
          "Next": "Rekongition Detection"
        },
        {
          "Variable": "$.source",
          "StringEquals": "s3-a2i-event",
          "Next": "A2I HumanLoop Data"
        },
        {
          "Variable": "$.resources[0]",
          "StringMatches": "arn:aws:events:*-scheduled-poll",
          "Next": "Rekongition Model"
        },
        {
          "Variable": "$.resources[0]",
          "StringMatches": "arn:aws:events:*-sampling-poll",
          "Next": "Human Sampling"
        }
      ],
      "Default": "Unknown Event"
    },
    "Parameter Store": {
      "Type": "Pass",
      "Next": "Apply Parameter"
    },
    "Apply Parameter": {
      "Type": "Task",
      "Resource": "${LambdaUpdateEventRules}",
      "End": true
    },
    "Rekongition Model": {
      "Type": "Task",
      "Resource": "${LambdaCheckAutoTraining}",
      "Next": "Check New Training"
    },
    "Check New Training": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.message.NextTask",
          "StringEquals": "CreateManifest",
          "Next": "Initiate Training"
        }
      ],
      "Default": "No New Training"
    },
    "No New Training": {
      "Type": "Succeed"
    },
    "Initiate Training": {
      "Type": "Pass",
      "Next": "Create Manifest"
    },
    "Create Manifest": {
      "Type": "Task",
      "Resource": "${LambdaCreateTrainingManifest}",
      "Next": "Create Project Version"
    },
    "Create Project Version": {
      "Type": "Task",
      "Resource": "${LambdaTrainDeployModel}",
      "Next": "Wait for Training"
    },
    "Wait for Training": {
      "Type": "Wait",
      "Seconds": 300,
      "Next": "Get Training Status"
    },
    "Get Training Status": {
      "Type": "Task",
      "Resource": "${LambdaTrainDeployModel}",
      "Next": "Training-in-Progress"
    },
    "Training-in-Progress": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.message.NextTask",
          "StringEquals": "DescribeProjectVersions",
          "Next": "Wait for Training"
        },
        {
          "Variable": "$.message.NextTask",
          "StringEquals": "StartProjectVersion",
          "Next": "Training Completed"
        },
        {
          "Variable": "$.message.NextTask",
          "StringEquals": "FailedF1Evaluation",
          "Next": "Failed F1 Score"
        }
      ],
      "Default": "Failure"
    },
    "Training Completed": {
      "Type": "Pass",
      "Next": "Start Model"
    },
    "Failed F1 Score": {
      "Type": "Pass",
      "Next": "Failure"
    },
    "Start Model": {
      "Type": "Task",
      "Resource": "${LambdaTrainDeployModel}",
      "Next": "Wait for Start"
    },
    "Wait for Start": {
      "Type": "Wait",
      "Seconds": 300,
      "Next": "Get Model Status"
    },
    "Get Model Status": {
      "Type": "Task",
      "Resource": "${LambdaTrainDeployModel}",
      "Next": "Starting-in-Progress"
    },
    "Starting-in-Progress": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.message.NextTask",
          "StringEquals": "DescribeProjectVersions",
          "Next": "Wait for Start"
        },
        {
          "Variable": "$.message.NextTask",
          "StringEquals": "ModelRunning",
          "Next": "Model Started"
        }
      ],
      "Default": "Failure"
    },
    "Model Started": {
      "Type": "Pass",
      "Next": "Deploy Endpoint"
    },
    "Deploy Endpoint": {
      "Type": "Task",
      "Resource": "${LambdaTrainDeployModel}",
      "End": true
    },
    "Rekongition Detection": {
      "Type": "Task",
      "Resource": "${LambdaRekognitionDetectLabel}",
      "Next": "Check Confidence"
    },
    "Check Confidence": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.message.NextTask",
          "StringEquals": "End",
          "Next": "Pass Confidence"
        }
      ],
      "Default": "Failed Confidence"
    },
    "Failed Confidence": {
      "Type": "Pass",
      "Next": "Check A2I"
    },
    "Check A2I": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.message.Task.UserSettings.EnableA2IWorkflow",
          "BooleanEquals": true,
          "Next": "Create HumanLoop"
        }
      ],
      "Default": "A2I Off"
    },
    "A2I Off": {
      "Type": "Pass",
      "End": true
    },
    "Create HumanLoop": {
      "Type": "Task",
      "Resource": "${LambdaA2ICreateHumanLoop}",
      "End": true
    },
    "Pass Confidence": {
      "Type": "Succeed"
    },
    "A2I HumanLoop Data": {
      "Type": "Task",
      "Resource": "${LambdaA2IHumanLoopData}",
      "Next": "Add Training Image"
    },
    "Add Training Image": {
      "Type": "Pass",
      "End": true
    },
    "Human Sampling": {
      "Type": "Pass",
      "Next": "Check Last Sample"
    },
    "Check Last Sample": {
      "Type": "Task",
      "Resource": "${LambdaCheckHumanSampling}",
      "Next": "Check Sampling Interval"
    },
    "Check Sampling Interval": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.message.NextTask",
          "StringEquals": "End",
          "Next": "No New Sample"
        }
      ],
      "Default": "Create Human Sample"
    },
    "Create Human Sample": {
      "Type": "Wait",
      "Seconds": 5,
      "Next": "Check Last Sample"
    },
    "No New Sample": {
      "Type": "Succeed"
    },
    "Failure": {
      "Type": "Fail"
    },
    "Unknown Event": {
      "Type": "Fail"
    }
  }
}
